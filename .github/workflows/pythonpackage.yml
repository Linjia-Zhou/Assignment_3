""" CSC108 Assignment 3: Club Recommendations - Starter code."""
from typing import List, Tuple, Dict, TextIO
import unittest
profile = open('profiles.txt', 'r')

# Sample Data (Used by Doctring examples)

P2F = {'Jesse Katsopolis': ['Danny R Tanner', 'Joey Gladstone',
                            'Rebecca Donaldson-Katsopolis'],
       'Rebecca Donaldson-Katsopolis': ['Kimmy Gibbler'],
       'Stephanie J Tanner': ['Michelle Tanner', 'Kimmy Gibbler'],
       'Danny R Tanner': ['Jesse Katsopolis', 'DJ Tanner-Fuller',
                          'Joey Gladstone']}

P2C = {'Michelle Tanner': ['Comet Club'],
       'Danny R Tanner': ['Parent Council'],
       'Kimmy Gibbler': ['Rock N Rollers', 'Smash Club'],
       'Jesse Katsopolis': ['Parent Council', 'Rock N Rollers'],
       'Joey Gladstone': ['Comics R Us', 'Parent Council']}


# Helper functions 

def update_dict(key: str, value: str,
                key_to_values: Dict[str, List[str]]) -> None:
    """Update key_to_values with key/value. If key is in key_to_values,
    and value is not already in the list associated with key,
    append value to the list. Otherwise, add the pair key/[value] to
    key_to_values.

    >>> d = {'1': ['a', 'b']}
    >>> update_dict('2', 'c', d)
    >>> d == {'1': ['a', 'b'], '2': ['c']}
    True
    >>> update_dict('1', 'c', d)
    >>> d == {'1': ['a', 'b', 'c'], '2': ['c']}
    True
    >>> update_dict('1', 'c', d)
    >>> d == {'1': ['a', 'b', 'c'], '2': ['c']}
    True
    """

    if key not in key_to_values:
        key_to_values[key] = []
        
    if value not in key_to_values[key]:
        key_to_values[key].append(value)


# Required functions

def load_profiles(profiles_file: TextIO) -> Tuple[Dict[str, List[str]],
                                                  Dict[str, List[str]]]:
    """Return a two-item tuple containing a "person to friends" dictionary
    and a "person_to_clubs" dictionary with the data from profiles_file.

    NOTE: Functions (including helper functions) that have a parameter of type
          TextIO do not need docstring examples.
    """
    
    person_friends = {}
    person_clubs = {}
    icomma = -1
    key = ''
    club_string = ''
    name_string = ''
    i, j = 0, 0
    
    profile_list = []
    for line in profile:
        profile_list.append(line)
    
    while i in range(len(profile_list)):
        #outer loop is for finding the key
        this_person = profile_list[i]
        icomma = this_person.find(',')
        name_string =  this_person[icomma + 2: len(profile_list[i]) - 1] + ' ' + \
            this_person[:icomma]
        key = name_string
        person_friends[key] = []
        
        j = i + 1
        
        while j < len(profile_list):
            if profile_list[j] == '\n':
                break            
            
            this_person = profile_list[j]
            
            if this_person.find(',') != -1:
                icomma = this_person.find(',')
                name_string =  this_person[icomma + 2: len(profile_list[j]) - 1] + ' ' + \
                    this_person[:icomma]
                person_friends[key].append(name_string)
            else:
                person_clubs[key] =[]
                person_clubs[key].append(this_person[:len(this_person) - 1])

            j += 1
        if person_friends[key] == []:
            del person_friends[key]
        
        i = j + 1
    tup = (person_friends, person_clubs)
    return tup

def get_average_club_count(person_to_clubs: Dict[str, List[str]]) -> float:
    """Return the average number of clubs that a person in person_to_clubs
    belongs to.

    >>> get_average_club_count(P2C)
    1.6
    """
    total_sum = 0.0
    
    if len(person_to_clubs) == 0:
        return total_sum
    
    else:
        for key in person_to_clubs:
            total_sum += len(person_to_clubs[key])
            
    return total_sum/len(person_to_clubs)

def get_last_to_first(
        person_to_friends: Dict[str, List[str]]) -> Dict[str, List[str]]:
    """Return a "last name to first name(s)" dictionary with the people from the
    "person to friends" dictionary person_to_friends.

    >>> get_last_to_first(P2F) == {
    ...    'Katsopolis': ['Jesse'],
    ...    'Tanner': ['Danny R', 'Michelle', 'Stephanie J'],
    ...    'Gladstone': ['Joey'],
    ...    'Donaldson-Katsopolis': ['Rebecca'],
    ...    'Gibbler': ['Kimmy'],
    ...    'Tanner-Fuller': ['DJ']}
    True
    """
    last_name_key = ''
    last_name_value = ''
    first_name_key = ''
    first_name_value = ''
    last_to_first = {}
    index_ch = 0
    
    #loop through the keys
    for key in person_to_friends:
        index_ch = key.rfind(' ')
        last_name_key = key[index_ch + 1:]
        first_name_key = key[:index_ch]
        if not last_name_key in last_to_first.keys():
            last_to_first[last_name_key] = []
            last_to_first[last_name_key].append(first_name_key)
        else: # if last_name_key is alr a key
            if (not first_name_key in last_to_first[last_name_key]) and \
               (not first_name_key in last_to_first[last_name_value]):
                last_to_first[last_name_key].append(first_name_key)

        for value in person_to_friends[key]:
            index_ch = value.rfind(' ')
            last_name_value = value[index_ch + 1:]
            first_name_value = value[:index_ch]
            if not last_name_value in last_to_first.keys():
                last_to_first[last_name_value] = []
                last_to_first[last_name_value].append(first_name_value)
            else: # if last_name_value is alr a key
                if (not first_name_value in last_to_first[last_name_value]) and \
                   (not first_name_value in last_to_first[last_name_key]):
                    last_to_first[last_name_value].append(first_name_value)
            last_to_first[last_name_value].sort()
    
    return last_to_first

def invert_and_sort(key_to_value: Dict[object, object]) -> Dict[object, list]:
    """Return key_to_value inverted so that each key is a value (for
    non-list values) or an item from an iterable value, and each value
    is a list of the corresponding keys from key_to_value.  The value
    lists in the returned dict are sorted.

    >>> invert_and_sort(P2C) == {
    ...  'Comet Club': ['Michelle Tanner'],
    ...  'Parent Council': ['Danny R Tanner', 'Jesse Katsopolis',
    ...                     'Joey Gladstone'],
    ...  'Rock N Rollers': ['Jesse Katsopolis', 'Kimmy Gibbler'],
    ...  'Comics R Us': ['Joey Gladstone'],
    ...  'Smash Club': ['Kimmy Gibbler']}
    True
    """
    new_key = ''
    new_value = ''
    invert_dict = {}
    
    for key in key_to_value:
        new_value = key
        for value in key_to_value[key]:
            new_key = value
            if not new_key in invert_dict.keys():
                invert_dict[new_key] = []
            invert_dict[new_key].append(new_value)
        invert_dict[new_key].sort()
        
    return invert_dict

def get_clubs_of_friends(person_to_friends: Dict[str, List[str]],
                         person_to_clubs: Dict[str, List[str]],
                         person: str) -> List[str]:
    """Return a list, sorted in alphabetical order, of the clubs in
    person_to_clubs that person's friends from person_to_friends
    belong to, excluding the clubs that person belongs to.  Each club
    appears in the returned list once per each of the person's friends
    who belong to it.

    >>> get_clubs_of_friends(P2F, P2C, 'Danny R Tanner')
    ['Comics R Us', 'Rock N Rollers']
    """
    clubs_list = []
    for value in person_to_friends[person]:
        if value in person_to_clubs.keys():
            for club in person_to_clubs[value]: # value is the friend of person
                if not club in person_to_clubs[person]:
                    clubs_list.append(club)
    clubs_list.sort()
    return clubs_list

def helper1_recommend_clubs(
    person_to_friends: Dict[str, List[str]],
    person_to_clubs: Dict[str, List[str]],
    person: str) -> List:   
    """Return a list of club recommendations for a person based on how many 
    of their friends are current members.
    
    >>> helper1_recommend_clubs(P2F, P2C, 'Jesse Katsopolis')
    ['Comics R Us', 1]
    """
    lst = []
    
    for friend in person_to_friends[person]:
        if friend in person_to_clubs.keys():
            for club in person_to_clubs[friend]:
                point = 1
                if len(lst) != 0:
                    for i in range(len(lst)):
                        if lst[i] == club:
                            lst.remove([club, point])
                            point += 1
                
                if not person in person_to_clubs.keys(): # if this person isn't in any clubs
                    lst.append([club, point])
                if (person in person_to_clubs.keys()) and \
                   (not club in person_to_clubs[person]):
                    lst.append([club, point])
    return lst

def helper2_recommend_clubs(
    person_to_friends: Dict[str, List[str]],
    person_to_clubs: Dict[str, List[str]],
    person: str) -> List:       
    """Return a list of club recommendations for a person based on how many \
    mututal club members are part of other clubs.
    
    >>> helper2_recommend_clubs(P2F, P2C, 'Jesse Katsopolis')
    [['Comics r Us', 1], ['Smash Club', 1]]
    """
    clubs_to_person = invert_and_sort(person_to_clubs) #clubs is now the key
    list_of_names = []
    potential_clubs = []
    lst = []
    
    if not person in person_to_clubs.keys(): # person not in any clubs
        return []
    
    for club in person_to_clubs[person]: #which clubs is this person in?
        list_of_names = clubs_to_person[club] #people who are also in this club 
        for name in list_of_names:
            point = 1
            potential_clubs = person_to_clubs[name] # all the clubs that this other person is in
            for item in potential_clubs:
                if not item in person_to_clubs[person]: # item is a club
                    if len(lst) != 0:
                        for i in range(len(lst)):
                            if lst[i][0] != item:
                                lst.append([item, point])
                            else:
                                lst.remove([item, point])
                                point += 1
                                lst.append([item, point])
                    else:
                        lst.append([item, point])
    return lst
    
def recommend_clubs(
        person_to_friends: Dict[str, List[str]],
        person_to_clubs: Dict[str, List[str]],
        person: str,) -> List[Tuple[str, int]]:
    """Return a list of club recommendations for person based on the
    "person to friends" dictionary person_to_friends and the "person
    to clubs" dictionary person_to_clubs using the specified
    recommendation system.

    >>> recommend_clubs(P2F, P2C, 'Stephanie J Tanner')
    [('Comet Club', 1), ('Rock N Rollers', 1), ('Smash Club', 1)]
    """
    #check return None in helper2
    
    lst1 = helper1_recommend_clubs(
        person_to_friends, person_to_clubs, person)
    lst2 = helper2_recommend_clubs(
        person_to_friends, person_to_clubs, person) 
    lst_repeat = []
    tup_repeats = ()
    tup1 = ()
    tup2 = ()
    ans = []
    
    if len(lst1) != 0 and len(lst2) != 0:
        for i in range(len(lst1) - 1, -1, -1):
            for j in range(len(lst2) - 1, -1, -1):
                if lst2[j][0] == lst1[i][0]:
                    ans.append(tuple([lst2[j][0], (lst2[j][1] + lst1[i][1])]))
                    lst2.remove(lst2[j])
                    lst1.remove(lst1[i])

    
    for i in range(len(lst1)):
        ans.append(tuple(lst1[i]))
    for j in range(len(lst2)):
        ans.append(tuple(lst2[j]))

    ans.sort()
    return ans

if __name__ == '__main__':
    pass

    # If you add any function calls for testing, put them here.
    # Make sure they are indented, so they are within the if statement body.
    # That includes all calls on print, open, and doctest.

    # import doctest
    # doctest.testmod()
